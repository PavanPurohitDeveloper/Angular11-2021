Child Routes:
- Route can have child routes upto unlimited no. of nested level.
- To work with this we have to follow below steps.


1. Create the Child Routes.
    {path: 'parentPath', component: ComponentName, children: [
      {path: 'childPath', component: ChildComponentName},
      {path: 'childPath', component: ChildComponentName},
      {path: 'childPath', component: ChildComponentName}
    ]}

2. Create the Hyperlinks for Child path.
    <a routerLink = "/parentpath/childpath">Link Text</a>

3. Create the <router-outlet> for child routes ( in the parent route component's template).
    <router-outlet></router-outlet>


Route Guards:
- Guard is nothing but which provides some security.
- Route Guards which can provides security for Routing
- The Guard is a service that executes at the specified situation while angular is navigating from one route to another route.
- We have following Guards:
	- CanActivate -- This executes before we enter into the routing.
	- CanDeactivate -- This executes before we leave the route. Ex:
	- CanChildActive -- This executes before we enter into a child routing.
	- CanLoad -- This is used for lazy loading.

    Once If user clicks on the hyperlink, it identify the route and identify the guard whether it is there are not.. if its there then you can go with that..

1. CanActivate:
- It executes before we enter into a routing.
															what it is getting identified..whthere Route is having
- Process ==> User Click on Hyperlink ==> It will Identify the Route ==> CanActivate  ==> It will execute that Logic ==> Execute corresponding component.
- Every guard is a service which is having an interface "CanActivate", and it comes with a method "CanActivate" which is boolean type.
- To apply this we use
	{path: 'parentPath', component: ComponentName, CanActivate: [ServiceName]}
	whenever user click on this particular path, this component has to be loaded earlier, but now this component is loaded only if this Service returns true.

## CanDeactivate:
- It executes before we leave the route.
- It is also a Service which was implemented from CanDeactivate Guard.
- It contains one method CanDeactivate() and returns boolean value, which indicates whether the route can be leave or not.

-- We have different routes avilable in our appln. ( app-routing.module.ts )
   route - is kind of URL.. user may access anything.. previliegs based on client requirement
   My requirement is whenever if they want to access the "Electronics" page/component, I just need to verify whether user is having a valid credentials or not.
   Before they enter into particular route, we need to execute some logic based on true or false , I just allow the user to enter into that particular one.. then u go "canActivate" guard.
