Services in Angular:
- A service is also a reusable class, which can be used to share the data from one to many components.
	Ex: I want to retrieve employee data from database.
	I want to use this data into 10 components
	Database ==> Employee ==> Component-1
	Database ==> Employee ==> Component-2
	Database ==> Employee ==> Component-3
								|
							 Service
	data retrieving is common functionality.. Instead of writing in each component..
	Total functionality I will create as separate one using "Service" class
	Each Service is communicating with each components.

- Every service class can have @Injectable() decorator, and this is avaible in core library of angular ('@angular/core').
- We can have few pre-defined services and also we can create our own service as well.
- Every service if we want to make use of it in component/service we use a concept of "Dependency Injection".
- A service can be used in another service also.
- To create a service we use an Angular CLI command like "ng g service <name>".
- Once we create a service we can register and use in 3 ways
    - Global(Angular 9.0)  //Entire application if you want use then providedIn:'root'
        @Injectable({
            providedIn:'root'
        })
    - At Module level
        @NgModule({
            providers:[name of service]
        })
    - At Component Level
        @Component({
            providers:[name of service]
        })

### Dependency Injection:-  is a design pattern. where the Objects are created based on usages.. on-demand Objects creation. Create an Object on-demand basis. we are properly handling the particualr object. Whenever requirement comes, then only the Object will be created.
To Inject the Services.
By using Constructor we do dependency Injection.

Whenever we use new keyword for object creation, 100 Objects will be created in heap memory.
explicitly calling dispose() method to kill the objects and to make use of memory.
Garbage collector only calls only when your heap memory is full..whenever you heap is completely full then only your Garbage collector will be invoked. Untill unless Garbage collector will never destroy the Objects.

*** what Dependency Injection will do is - whenever if i am trying to create any object with the help of dependency Injection (  constructor(private _serv: DbService) ), I am not using any new keyword here..
whenever this component is getting displayed or usage is done, then this Object is getting killed automatically.
It wont impact the performance of appln.

### ngOnInit():
----------------
//ngOnInit() == whenever this component is loaded generally it is something like on-load event. Whenever this component is loaded, then this method will get automatically invoked.
  ngOnInit() {
    this.sqlData = this._serv.mySqlData();
  }

##### To resolve this below exception:
----------------------------------------
Failed to compile.
src/app/app.component.html:1:1 - error NG8001: 'first' is not a known element:
1. If 'first' is an Angular component, then verify that it is part of this module.
2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.

1 <first></first>
  ~~~~~~~

  src/app/app.component.ts:5:16
    5   templateUrl: './app.component.html',
                     ~~~~~~~~~~~~~~~~~~~~~~
    Error occurs in the template of component AppComponent.

Solution: define the component in app.module.ts inside declarations section..
	@NgModule({
	  declarations: [
		AppComponent,
		FirstComponent,
		SecondComponent
	  ],
	  imports: [
		BrowserModule,
		AppRoutingModule
	  ],
	  providers: [],
	  bootstrap: [AppComponent]
	})
	export class AppModule { }
