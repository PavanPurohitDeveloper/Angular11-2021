Building Blocks:
-----------------
1. Components
2. Template  -- is a simple html file
3. Date Binding -- is a mechanism which can be used to share the data from template to the component.
					The data whatever you having in the component class and if you want to display that in a template, then we go for Data Binding mechanism.
4. Directives
5. Pipes
6. Routing
7. Dependency Injection -- is a kind of design pattern where you can Inject something.
8. Services
9. Modules

- Every Angular element is having 3 parts:
	- import statements  -- it is used to import/get the core packages.
	- decorator   -- is used to write the metadata.
	- export class  -- is used to export/send/gives the functionality.

==> import { Component } from '@angular/core'; //@angular/core is a package.

### Components:
------------------
- A Component is main building block of angular, and angular was completely implemented with the help of Components.
- A Component is a reusable UI, which contains state of the page.( Component contains data of page along with few functionalities).
- A Component is a typescript class which was created with the help of @Component() decorator.
- Component contains metadata.

### Decorator:
----------------
- Component contains metadata.
- Decorator is used to write the metadata.  
	metadata is information about the component and which selector we are using..
- Decorator is used to differentiate the angular elements from one to another.
			that means If you want to create a component then we will be using @Component{} decorator.
			Suppose if you want to create a Pipe, there we will use @Pipe{}
			Suppose if you want to create a routing mechanism i.e., Module then we will use *ngModule{}
			Suppose if you want to create a Service, there we will use @Injectable{}
			Suppose if you want to create a Module, there we will use @Module{}
Example:
	@Component(
	  {
		selector: 'employee', //First metadata element is "selector"..selector is used to select the component at runtime.  we can give anyname..
		template: `
		  <div>
			Employee ID is: {{empID}}<br>
			Employee Name is: {{empName}}<br>
			Employee Salary is: {{empSal}}
		  </div>
		  `,
		styles: ['text']
	  }
	)

### difference b/w template? and templateUrl? ?
----------------------------------------------
template? - is mainly used for Inline html. if you want to write html code within component level
templateUrl? - you can create in a separate html file and make use of it.

### styleUrls? Vs styles?
--------------------------


### Data Binding mechanism:
-----------------------------
Data Binding is a technique which will allows you to bind the model data to the view page and view data to the model.

Model is nothing but its data.
Controller is nothing but its a Component file
View is nothing but HTML

-> data binding :- means, data whatever we having in the component class, if you want to display that data in a template,
then we suppose to have data binding..
Interpolation is one of the data binding mechanism which will be used to display.
It is the concept of binding the data from HTML to the Component and Component to the HTML. data sharing between these two is callled data binding.

**********
> It is a mechanism which can be used to bind the data from Component to template and template to component.
> In angular we have two bindings:
	1). One-way Data binding:  One Direction ( reading the data in One Direction only )
		- Interpolation  --> {{}}  --> Component ==> Template
									  Ex: ename = "Srikanth";   =>  <h2>{{ename}}</h2>
									  
		- Property Binding  --> []  --> Component ==> Template
							for which attribute you want to assign the property value for that you can give [].
								Ex: url = "http://www.nareshit.in";   =>  <a [href]="url">Naresh IT</a>	
	
		- Event binding: -->  () --> Template ==> Component
								    used to handle the data from Template to Component
		
	2) Two-way Data binding: Bi-directional.. Suppose If Component is modified then it will get affected on Template.
													  If Template is modified then it will get affected on Component.
		- [(ngModel )]  -->  Template <==> Component
**********

There are 2 ways:
-----------------
>> One-way Data Binding:
is something like read only technique. It always reads the data from Model and bind it to the view. 
Only one time it gets readed.
	
	> One-way Data Binding:- conatins "Interpolation", "property binding", "Event binding".
	
	> We have 3 options inside One way data binding:
	1. Interpolation syntax
	2. property
	3. attribute

	> Interpolation : can we written with {{ }} - is one of the data binding mechanism which will be used to display.
					  Interpolation is used to get the data from component to template.
					  If component is having some data that data you want to display in the template.
					  ** We can write some conditional check in the Interpolation syntax also.
					  Ex:   <dt>Stock Status</dt>
							<dd>{{(product.InStock == true) ? "Available": "Out of Stock"}}</dd>
				
	> Property/Attribute binding: can we written with []  -- this also used to get the data from component to template.
					Whenever If you want to give any special values/dynamic values for the attributes of the HTML 
					then only you should go for Attribute binding.

	> Event binding: can we written with () -- used to handle the data from template to component.. one way direction..
												Ex: Form submission.
											
>> Two-way Data Binding:
- Angular handles two-way data binding with the combination of event and property binding.
- In this binding once if the value is changed in one place will gets effected in bith the places.
- two way binding: this can be written with [( )]  -- which can used only for input elements
- To work with this we use [(ngModel)], which is a directive. This directive is avilable in "@angular/forms" library 
in module "FormsModule".
- Always [(ngModel)] OR two-way data binding is used for input elements.

- Its bi-directional ( i.e., 2 ways). 
	- It will read the data from the component and displayed in the template.
	- Suppose From the template if you are doing any modification , same modification will get affected on
	  the component itself. 	

### difference between execution of angular appln using "ng serve" Vs "n g s -o"  ?
------------------------------------------------------------------------------------
> ng s -o  -- it will get open from google chrome browser automatically..
> ng serve -- you have to open the browser manually.

### Execution of Angular:
---------------------------
first file execution will starts from "main.ts".. similar to main() method in java..
from "main.ts" file, Bootstrapping/Initializing the "AppModule" which is inside "app.module.ts" file.
From "app.module.ts" file, It is Bootstrapping/Initializing the "AppComponent".
AppComponent is a component class..AppComponent is getting instantiated with the help of selector.( selector: 'app-root')
 A selector which is used to instatiate the component. which will take the responsibility to get into the Application.
This selector: 'app-root' we will be using inside "index.html" file.
	<body>
		<app-root></app-root>
	</body>

Flow is:
- first request will go to main.ts ..
- From the main.ts we have AppModule.ts ..
- From the AppModule.ts generally , we have AppComponent.ts ..
- From the AppComponent.ts, whatever the selector we are having, we are going to pick the selector, and giving that in the index.html.
- index.html is the starting page to display.. index.html is UI page.
- main.ts is the programming page/file..

==> first request will go to main.ts ==> AppModule.ts  ==> AppComponent.ts ==> Selector ==> index.html

Module - is the Parent one
Component - is the child one
Every Component must be associated with one module.
Once if you create a component and you to tell explicitly , that must must define in the declarations{} section.
register my component (Ex: EmployeeComponent) and which is as part of AppModule,
	and if you want to tell explicitly , that must must define in the declarations{} section.

"app.module.ts" file:
	@NgModule({
	  declarations: [
		AppComponent,
		EmployeeComponent
	  ],
	  imports: [
		BrowserModule,
		AppRoutingModule
	  ],
	  providers: [],
	  bootstrap: [EmployeeComponent]
	})
	export class AppModule { }

### default component will be created with below files:
--------------------------------------------------------
app.component.ts
app.component.html
app.component.css
app.component.spec.ts -- which wll be used for unit testing.

### BY using Angular CLI we generate Component using a command:
-----------------------------------------------------------------
> ng generate component <name> --options
> ng g c <name_of_component> --options

Ex: 
> ng g c demo
	automaticall it will be created below relevant files..
	CREATE demo.component.ts
	CREATE demo.component.html
	CREATE demo.component.css
	CREATE demo.component.spec.ts
	UPDATED app.module.ts

https://angular.io/cli/new

> ng g c demo --skip-tests  //do not generate spec.ts test files for the new project.

C:\MyWorkspace\visual-studio-code-workspace\Angular11-2021\ComponentsDemo>ng g c Sample --skip-tests
CREATE src/app/sample/sample.component.html (21 bytes)
CREATE src/app/sample/sample.component.ts (275 bytes)
CREATE src/app/sample/sample.component.css (0 bytes)
UPDATE src/app/app.module.ts (792 bytes)

### Constructor:
-----------------
Constructor is mainly used to Initialize the data.
Constructor is mainly used for dependency Injection.

#### 3 types of Lists in HTML:
-----------------------------
1. Ordered List
2. Un-Ordered List
3. Definition List  
	<dl>  // definition list
	  <dt>Name</dt>  //definition term
	  <dd>{{product.Name}}</dd>  //definition data/description
	</dl>  

**** As a angular Developer: You have to take the request/input from User and giving it to the Angular Service, 
and that service will make an AJAX request to background service ( background service - it can be java, python, php )
you suppose to give that particular information by having that particular API call.


