Spring Boot Full Stack with Angular | Full Course [2021] [NEW]
------------------------------------
github repo:
https://github.com/getarrays/employeemanager/tree/master/src/main/java/tech/getarrays/employeemanager
https://github.com/getarrays/employeemanagerapp

- Create a spring boot project from spring initializer
  https://start.spring.io/
  
//Bootstrap snippet. bs4 contact cards
https://www.bootdey.com/snippets/view/bs4-contact-cards  
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf

Basic concepts:
---------------- 
Java
Spring Boot
HTML & CSS
JavaScript
TypeScript  -- TypeScript is a superset of JavaScript..helps better right JS code
Angular  -- Angular uses TypeScript. Angular which is JavaScript framework which uses TypeScript.
HTTP  -- when frontend is communicating with backend.. communication is done via API.
CLI - command line interface. to make HTTP request
Database

Pre-requisites:
----------------
- Install IntelliJ IDEA
- Install NodeJS
	https://nodejs.org/en/download/
	- NPM will be installed automatically once NodeJS is installed.
- Install Angular CLI
	https://cli.angular.io/
	> npm install -g @angular/cli
- Install Visual Studio Code
- Install Postman ( Http client )
- Install HTTPie -- to make http request call. we can also using CURL to make Http request call.
	https://httpie.io/


API Design:
------------
Client								Server
HTTP Requests    ---->   Controller      ----->  Service
													|
													|
												 Database	
												   MySQL

Controller - accepts the request and return the response back to http client request..

*** browser can only send GET request. so we need to use postman to send request.

MySQL Client:   HeidiSQL
--------------
show databases;
use employee_manager;
select * from employee;

{
  "email": "daniel@gmail.com",
  "empName": "Daniel Craig",
  "imageUrl": "https://bootdey.com/img/Content/avatar/avatar1.png",
  "jobTitle": "JavaScript",
  "phoneNo": "4570090322"
}
{
  "email": "christine@gmail.com",
  "empName": "Christine Smith",
  "imageUrl": "https://bootdey.com/img/Content/avatar/avatar3.png",
  "jobTitle": "UX/UI",
  "phoneNo": "4570090322"
}
{
  "email": "dave@gmail.com",
  "empName": "Dave Rogers",
  "imageUrl": "https://bootdey.com/img/Content/avatar/avatar7.png",
  "jobTitle": "Java",
  "phoneNo": "4570090322"
}
{
  "email": "ramesh@gmail.com",
  "empName": "Ramesh Jalvar",
  "imageUrl": "https://bootdey.com/img/Content/avatar/avatar4.png",
  "jobTitle": "Angular",
  "phoneNo": "4570090322"
}
{
  "email": "ricky@gmail.com",
  "empName": "Ricky Ponting",
  "imageUrl": "https://bootdey.com/img/Content/avatar/avatar4.png",
  "jobTitle": "ReactJS",
  "phoneNo": "4570090322"
}

using httpie client:
---------------------
http GET http://localhost:8080/employee/all

create a new file:
	touch data.json
	nano data.json
			{
	  "email": "ricky@gmail.com",
	  "empName": "Ricky Ponting",
	  "imageUrl": "https://bootdey.com/img/Content/avatar/avatar4.png",
	  "jobTitle": "ReactJS",
	  "phoneNo": "4570090322"
	}
	save the file.
> http POST :8080/employee/add < data.json	

> http PUT :8080/employee/add < data.json	  //to update the employee

GET - http://localhost:8080/employee/all
------------------------------------------
[
    {
        "id": 1,
        "empName": "Daniel Craig",
        "email": "daniel@gmail.com",
        "jobTitle": "JavaScript",
        "phoneNo": "4570090322",
        "imageUrl": "https://bootdey.com/img/Content/avatar/avatar1.png",
        "employeeCode": "01a6ea5e-9405-4641-91dc-933ebe39720a"
    },
    {
        "id": 2,
        "empName": "Christine Smith",
        "email": "christine@gmail.com",
        "jobTitle": "UX/UI",
        "phoneNo": "4570090322",
        "imageUrl": "https://bootdey.com/img/Content/avatar/avatar3.png",
        "employeeCode": "899a61e0-c359-465f-9758-6cb4e033d8ad"
    },
    {
        "id": 3,
        "empName": "Dave Rogers",
        "email": "dave@gmail.com",
        "jobTitle": "Java",
        "phoneNo": "4570090322",
        "imageUrl": "https://bootdey.com/img/Content/avatar/avatar7.png",
        "employeeCode": "563cac52-aabf-44f2-8dae-fbee9adc4898"
    },
    {
        "id": 4,
        "empName": "Ramesh Jalvar",
        "email": "ramesh@gmail.com",
        "jobTitle": "Angular",
        "phoneNo": "4570090322",
        "imageUrl": "https://bootdey.com/img/Content/avatar/avatar4.png",
        "employeeCode": "d3f6b98c-3cd6-4f17-bc3d-70d6352cea65"
    },
    {
        "id": 5,
        "empName": "Ricky Ponting",
        "email": "ricky@gmail.com",
        "jobTitle": "ReactJS",
        "phoneNo": "4570090322",
        "imageUrl": "https://bootdey.com/img/Content/avatar/avatar4.png",
        "employeeCode": "d5ef4484-47bf-4af6-9a3f-428c88a09915"
    }
]


Errors:
==========
2021-03-01 16:03:38.038  INFO 29280 --- [nio-8080-exec-5] com.nit.service.EmployeeServiceImpl      : Deleting the Employee for Employee Id..5
Hibernate: select employee0_.id as id1_0_, employee0_.email as email2_0_, employee0_.emp_name as emp_name3_0_, employee0_.employee_code as employee4_0_, employee0_.image_url as image_ur5_0_, employee0_.job_title as job_titl6_0_, employee0_.phone_no as phone_no7_0_ from employee employee0_ where employee0_.id=?
2021-03-01 16:03:38.054 ERROR 29280 --- [nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.InvalidDataAccessApiUsageException: No EntityManager with actual transaction available for current thread - cannot reliably process 'remove' call; nested exception is javax.persistence.TransactionRequiredException: No EntityManager with actual transaction available for current thread - cannot reliably process 'remove' call] with root cause

javax.persistence.TransactionRequiredException: No EntityManager with actual transaction available for current thread - cannot reliably process 'remove' call


Client design:
================
- UI will call to Component
- Component will call to Service(Http Request)
- Service(Http Request) will talk to Server (Rest Controller)
- Rest Controller will talk to MySQL Database

componemnt.html ---> componets.ts ---> service.ts ---> Backend 

*** From employee.component.ts file , selector: 'app-employee', must be present in app.component.html to load 
the data on UI..

style.css --> /* You can add global styles to this file, and also import other style files */

-------------------------------------------------------------------------------------------
1. Create an interface/class/service/component using CLI.
> ng generate interface employee
> ng g class employee
> ng g service employee
	ng generate service employee --skipTests=true  //If I dont want spec files to create
> ng g component employee

1.ng g interface employee
 it will generate Employee.ts as interface (export interface Employee { ..
  }
  )
2. ng g class employee
  it will generate Employee class 
  export class Employee{
  
  }
  
3. ng g service employee
   it will generate 2 files
     i. employee.service.ts
	 ii.  employee.service.spec.ts
	 
   
4 ng g component employee
  it will generate 2 files
     i. employee.component.html
	 ii. employee.component.css
	 iii. employee.component.ts
	 iv. employee.component.spec.ts

Run -> ng generate component component-name to generate a new component. 
You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.
-------------------------------------------------------------------------------------------

we use this UI to build the appln.
http://bootdey.com/snippets/view/bs4-contact-cards


1. employee.component.css
2. employee.component.html 
3. employee.component.spec.ts
4. employee.component.ts   --> we have selector: 'app-employee'
5. app.module.ts   -->  delcare NgModule - EmployeeComponent and Import HttpClientModule..
		 @NgModule({
		  declarations: [
			AppComponent,
			EmployeeComponent
		  ],
		  imports: [
			BrowserModule,
			AppRoutingModule,
			HttpClientModule
		  ],
		  providers: [],
		  bootstrap: [AppComponent]
		})
		export class AppModule { }
6. employee.service.ts
	- define the property for rest end point URL.. that we are going to invoke.
	- Inject HttpClient inside a constructor
	- define methods with different HTTP protocol methods to call REST API
		 - getEmployees()    --> by using HttpClient get() method
		 - addEmployee()     --> by using HttpClient post() method
		 - updateEmployee()  --> by using HttpClient put() method
		 - deleteEmployee()  --> by using HttpClient delete() method		 
	
7. employee.ts  -- //This interface or model class which will hold the response of REST Api

8. From employee.component.ts file , selector: 'app-employee', must be present in app.component.html to load 
the data on UI..

9. environment.ts  -> In this class, we define property for backend server URL - apiBaseUrl: 'http://localhost:8080'

### src="{{employee?.imageUrl}}"  -- here ? means safe navigation operator - making sure that this employee exists 
before tries to access to any atributes on that employee. which is safe way to navigate to certain attributes.
sometimes if we dont have that, and if browser tries to parse this URL, whatevere if u try to access any attribute and 
if employee doesn't exist or its not loaded yet it will throw an error on browser. to avoid Errors we use ?.
<div class="col-6">
            <a href=""><img src="{{employee?.imageUrl}}" alt="" class="img-fluid rounded-circle w-60"></a>
 </div>
 
 
*** We need to add 'FormsModule' inside app.module.ts file
*** addForm.reset();//to clear the form
